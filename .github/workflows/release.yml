name: Build & Release

on:
  push:
    tags:
      - 'version/**'

jobs:

  # Check that the tag that is being used starts with `version/`. If
  # this is not the case, this tag is not intended for release.
  verify:
    name: Verify version tag
    runs-on: ubuntu-latest
    steps:
      - id: verify
        if: startsWith(github.ref, 'refs/tags/version') != true
        uses: andymckay/cancel-action@0.2

  # From the tag we split the individual version components:
  # major.minor.patch.stage<N>. Note that post releases are not part
  # of this schema as they are only used for releasing updated docker
  # images.
  version:
    name: Obtain version
    runs-on: ubuntu-latest
    needs: verify
    steps:
      - id: split
        run: |
          TAG=${GITHUB_REF#refs/*/}
          VERSION=${TAG#version/*}
          PARTS=(${VERSION//\./ })
          MAJOR=${PARTS[0]}
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=major::${MAJOR}"
          echo "::set-output name=minor::${PARTS[1]}"
          PARTS2=( $(grep -Eo '[[:digit:]]+|[^[:digit:]]+' <<< ${PARTS[2]} ) )
          echo "::set-output name=patch::${PARTS2[0]}"
          echo "::set-output name=stage::${PARTS2[1]}"
          echo "::set-output name=build::${PARTS2[2]}"
          MAJOR_NAME=''
          if [[ $MAJOR == '3' ]]; then MAJOR_NAME="petronas"; fi
          if [[ $MAJOR == '2' ]]; then MAJOR_NAME="harukas"; fi
          if [[ $MAJOR == '1' ]]; then MAJOR_NAME="trolltunga"; fi
          echo "::set-output name=major_name::${MAJOR_NAME}"
    outputs:
      version: ${{ steps.split.outputs.version }}
      major: ${{ steps.split.outputs.major }}
      minor: ${{ steps.split.outputs.minor }}
      patch: ${{ steps.split.outputs.patch }}
      stage: ${{ steps.split.outputs.stage }}
      build: ${{ steps.split.outputs.build }}
      major_name: ${{ steps.split.outputs.major_name }}

  # Create Github release which can be used DOI generation
  github-release:
    runs-on: ubuntu-latest
    needs: version
    env:
      version: ${{ needs.version.outputs.version }}
    steps:
    - uses: actions/checkout@v3
    - name: Create a Release
      uses: elgohr/Github-Release-Action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        title: $version

  # Build an release all the vantage6 infrastructure packages. For all
  # the packages it will (1) update the version as specified in the tag,
  # (2) build the package, (3) upload it to pypi, and (4) build and push
  # the Docker image
  build-n-release:

    name: Build and release the project
    runs-on: ubuntu-latest
    needs: version
    env:
      version: ${{ needs.version.outputs.version }}
      major: ${{ needs.version.outputs.major }}
      minor: ${{ needs.version.outputs.minor }}
      patch: ${{ needs.version.outputs.patch }}
      stage: ${{ needs.version.outputs.stage }}
      build: ${{ needs.version.outputs.build }}

    steps:

      - name: Login to harbor2.vantage6.ai
        env:
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PASSWORD: ${{ secrets.DOCKER_TOKEN }}
        run: |
          docker login harbor2.vantage6.ai -u $USERNAME -p $PASSWORD

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install click
          pip install wheel
          pip install twine

      - name: Update version in packages
        id: set
        run: |
          BUILD="--build 0"; if [[ -n $build ]]; then BUILD="--build $build"; fi
          SPEC="--spec final"
          if [[ $stage == 'a' ]]; then SPEC="--spec alpha"; fi
          if [[ $stage == 'b' ]]; then SPEC="--spec beta"; fi
          if [[ $stage == 'rc' ]]; then SPEC="--spec candidate"; fi
          FLAGS="--version ${major}.${minor}.${patch} $BUILD --post 0 $SPEC"
          make set-version FLAGS="$FLAGS"

      - name: Build project
        id: make
        run: |
          make rebuild

      - name: Publish project to PyPi
        id: publish
        if: ${{ !env.ACT }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          make publish

      - name: Build Docker image
        run: make image TAG=$version

      - name: Push Docker image
        run: make docker-push TAG=$version

  # Update the server and node images on harbor2 for this major version,
  # including the 'live' tag that triggers a redeployment of the IKNL deployment
  deploy:
    runs-on: ubuntu-latest
    needs: [version, build-n-release]
    env:
      version: ${{ needs.version.outputs.version }}
      stage: ${{ needs.version.outputs.stage }}
      major_name: ${{ needs.version.outputs.major_name }}
    steps:

      - name: Login to harbor2.vantage6.ai
        env:
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PASSWORD: ${{ secrets.DOCKER_TOKEN }}
        run: |
          docker login harbor2.vantage6.ai -u $USERNAME -p $PASSWORD

      - name: Pull docker images
        if: ${{  env.stage == ''  &&  env.major_name != '' }}
        run: |
          docker pull harbor2.vantage6.ai/infrastructure/server:${version}
          docker pull harbor2.vantage6.ai/infrastructure/node:${version}

      - name: Tag docker images
        if: ${{  env.stage == ''  &&  env.major_name != '' }}
        run: |
          docker tag harbor2.vantage6.ai/infrastructure/server:${version} harbor2.vantage6.ai/infrastructure/server:${major_name}
          docker tag harbor2.vantage6.ai/infrastructure/server:${version} harbor2.vantage6.ai/infrastructure/server:${major_name}-live
          docker tag harbor2.vantage6.ai/infrastructure/node:${version} harbor2.vantage6.ai/infrastructure/node:${major_name}

      - name: Push docker images
        if: ${{  env.stage == ''  &&  env.major_name != '' }}
        run: |
          docker push harbor2.vantage6.ai/infrastructure/server:${major_name}
          docker push harbor2.vantage6.ai/infrastructure/server:${major_name}-live
          docker push harbor2.vantage6.ai/infrastructure/node:${major_name}

  # When the project is built and released the Discord community is notified.
  notify:
    runs-on: ubuntu-latest
    needs: [version, build-n-release]
    env:
      version: ${{ needs.version.outputs.version }}
      stage: ${{ needs.version.outputs.stage }}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          pip install discord.py==1.7.3
          pip install click

      - name: Notify Discord community
        if: ${{  env.stage == '' }}
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_RELEASE_TOKEN }}
        run: |
          make community FLAGS="--version $version --notes '' \
            --post-notes ''"
