on:
  push:
    tags:
      - 'version/**'

jobs:
  # retrieve version from tag: major.minor.patch.preN
  verify:
    name: Verify version tag
    runs-on: ubuntu-latest
    steps:
      - id: verify
        if: startsWith(github.ref, 'refs/tags/version') != true
        uses: andymckay/cancel-action@0.2
  version:
    name: Obtain version
    runs-on: ubuntu-latest
    needs: verify
    steps:
      - id: split
        run: |
          TAG=${GITHUB_REF#refs/*/}
          VERSION=${TAG#version/*}
          PARTS=(${VERSION//\./ })
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=major::${PARTS[0]}"
          echo "::set-output name=minor::${PARTS[1]}"
          PARTS2=( $(grep -Eo '[[:digit:]]+|[^[:digit:]]+' <<< ${PARTS[2]} ) )
          echo "::set-output name=patch::${PARTS2[0]}"
          echo "::set-output name=stage::${PARTS2[1]}"
          echo "::set-output name=build::${PARTS2[2]}"
    outputs:
      version: ${{ steps.split.outputs.version }}
      major: ${{ steps.split.outputs.major }}
      minor: ${{ steps.split.outputs.minor }}
      patch: ${{ steps.split.outputs.patch }}
      stage: ${{ steps.split.outputs.stage }}
      build: ${{ steps.split.outputs.build }}

  # set version in all submodules (?)
  build:
    name: Set version in modules
    runs-on: ubuntu-latest
    needs: version
    env:
      version: ${{ needs.version.outputs.version }}
      major: ${{ needs.version.outputs.major }}
      minor: ${{ needs.version.outputs.minor }}
      patch: ${{ needs.version.outputs.patch }}
      stage: ${{ needs.version.outputs.stage }}
      build: ${{ needs.version.outputs.build }}

    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: peep
        run: |
          echo "::debug::$(cd vantage6 && ls)"
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: install deps
        run: |
          python -m pip install --upgrade pip
          pip install click
          pip install wheel
          pip install twine
          pip install discord.py
      - id: set
        run: |
          BUILD="--build 0"; if [[ -n $build ]]; then BUILD="--build $build"; fi
          SPEC="--spec final"
          if [[ $stage == 'a' ]]; then SPEC="--spec alpha"; fi
          if [[ $stage == 'b' ]]; then SPEC="--spec beta"; fi
          if [[ $stage == 'rc' ]]; then SPEC="--spec candidate"; fi
          FLAGS="--version ${major}.${minor}.${patch} $BUILD --post 0 $SPEC"
          echo "::debug::$FLAGS"
          make set-version FLAGS="$FLAGS"
      - id: make
        run: |
          make rebuild
      - id: peep
        run: |
          echo "::debug::$(cd vantage6 && cd dist && ls)"
      - id: publish
        if: ${{ !env.ACT }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          make publish
      - name: Notify community
        runs-on: ubuntu-latest
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_RELEASE_TOKEN }}
        run: |
          make community FLAGS="--version $version --notes 'todo' --post-notes 'also todo'"

  # # notify community
  # notify-community:
  #   name: Notify Discor community
  #   runs-on: ubuntu-latest
  #   needs: upload-to-PyPi
