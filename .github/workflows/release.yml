on:
  push:
    tags:
      - 'version/**'

jobs:
  # retrieve version from tag: major.minor.patch.preN
  get-version-from-tag:
    name: Obtain version info
    runs-on: ubuntu-latest
    outputs:
      major: ${{ steps.split.outputs.major }}
      minor: ${{ steps.split.outputs.minor }}
      patch: ${{ steps.split.outputs.patch }}
      stage: ${{ steps.split.outputs.stage }}
      build: ${{ steps.split.outputs.build }}

    steps:
      - id: obtain-tag
        run: echo "TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - id: print-tag
        run: echo $GITHUB_ENV
      - id: check-tag
        if: startsWith(github.ref, 'refs/tags/version') != true
        uses: andymckay/cancel-action@0.2


  #     - id: split
  #       run: |
  #         echo ::set-output name=tag::${TAG}
  #         echo ::set-output name=major::${TAG}
  #         echo ::set-output name=minor::${TAG}
  #         echo ::set-output name=stage::${TAG}
  #         echo ::set-output name=build::${TAG}
  #     - id: print
  #       env:
  #         TAG: ${{ steps.split.outputs.tag }}
  #         MAJOR: ${{ steps.split.outputs.major }}
  #         MINOR: ${{ steps.split.outputs.minor }}
  #         PATCH: ${{ steps.split.outputs.patch }}
  #         STAGE: ${{ steps.split.outputs.stage }}
  #         BUILD: ${{ steps.split.outputs.build }}
  #       run: |
  #         echo full version = $RELEASE_VERSION
  #         echo major = $MAJOR
  #         echo minor = $MINOR


  # # set version in all submodules (?)
  # set-version-in-submodule:
  #   name: Set version in modules
  #   runs-on: ubuntu-latest
  #   needs: get-version-from-tag

  # # build packages
  # build:
  #   name: Build all submodule
  #   runs-on: ubuntu-latest
  #   needs: set-version-in-submodule

  # upload-to-pypi:
  #   name: Upload to PyPi
  #   runs-on: ubuntu-latest
  #   needs: build

  # # notify community
  # notify-community:
  #   name: Notify Discor community
  #   runs-on: ubuntu-latest
  #   needs: upload-to-PyPi
